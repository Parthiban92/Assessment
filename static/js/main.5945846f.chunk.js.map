{"version":3,"sources":["List.js","Search.js","TextBook.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["List","props","add_favourite","event","setState","isChecked","state","localStorage","setItem","target","value","FormData","name","handleSubmit","e","preventDefault","params","s","y","query","Object","keys","map","k","encodeURIComponent","join","fetch","then","data","b","json","console","log","movie_list","Search","movie_array","catch","error","val","className","id","onsubmit","for","type","onChange","this","onClick","form_data","checked","toggleChange","Title","Year","imdbID","React","Component","handleChange","search_value","userList","res","filter","user","title","toLowerCase","startsWith","filteredPerson","newdata","TextBook","todo","index","values","key","val2","key1","val3","key3","todos","Form","href","exact","path","component","App","flexiConfig","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5945846f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class List extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={  \r\n                       movie_array:[],\r\n                       isChecked: true,\r\n                        val:'',\r\n                       s:'',\r\n                        y:'',\r\n      \r\n                    }\r\n \r\n        console.log(props)\r\n    }\r\n\r\n\r\n\r\n       add_favourite = (event) => {\r\n                       this.setState({ isChecked: !this.state.isChecked});\r\n                    //    alert(this.state.isChecked)\r\n                        if(this.state.isChecked == false)\r\n                        {\r\n                            localStorage.setItem('myValueInLocalStorage', event.target.value);\r\n                        }else{\r\n                           localStorage.setItem('myValueInLocalStorage', '');\r\n                        }\r\n                    }\r\n  \r\n\r\n      FormData = (event) => {\r\n\r\n                           this.setState({  [event.target.name]: event.target.value })\r\n                           }\r\n\r\n      handleSubmit = (e) => {\r\n                       e.preventDefault();\r\n                        let params = {\r\n                                       \"s\": this.state.s,\r\n                                       'y':this.state.y,\r\n                                        \"apikey\": \"2c96c239\"\r\n                                     };\r\n\r\n                         let query = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');\r\n                         let url = 'http://www.omdbapi.com/?' + query;\r\n                         fetch(url)\r\n                              .then(data => {\r\n                                   let b = data.json()\r\n                                      console.log(b)\r\n                                   return  b\r\n                              })\r\n                              .then((movie_list) => {\r\n                                  console.log(movie_list.Search)\r\n                                   this.setState({ movie_array: movie_list.Search })\r\n                                  console.log(movie_list)\r\n                                 }).catch(function (error) {\r\n                                  console.log('request failed', error)\r\n                              });\r\n\r\n                                   \r\n\r\n                             }\r\n  render() {\r\n\r\n    return (\r\n            <div>\r\n                  <div className=\"row\">\r\n                          <div className=\"col-lg-12\">\r\n                              <div className=\"bs-component\">\r\n                                  <form className=\"well form-search\" id=\"search-by-title-form\" onsubmit=\"return false;\">\r\n                                  <fieldset> <legend></legend>\r\n                                  </fieldset>\r\n                                  <div>\r\n                                      <label className=\"control-label\" for=\"s\">Title:</label>\r\n                                      <input type=\"text\" id=\"s\" name=\"s\" className=\"input-small\" onChange={ this.FormData } />\r\n                                      &nbsp;&nbsp;\r\n                                      <label className=\"control-label\" for=\"y\">Year:</label>\r\n                                      <input type=\"text\" id=\"y\" name=\"y\" className=\"input-small\" onChange={ this.FormData }  />\r\n                                      &nbsp;&nbsp;\r\n                                      \r\n                                      &nbsp;&nbsp;\r\n                                      <button id=\"search-by-title-button\" type=\"button\" onClick={this.handleSubmit}  className=\"btn-sm btn-primary\">Search</button>\r\n                                      <button id=\"search-by-title-reset\" type=\"reset\" className=\"btn-sm\">Reset</button>\r\n                                  </div>\r\n                                  \r\n                                  </form>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                           <table className=\" table table-striped\">\r\n                              <thead>\r\n                                            <tr>\r\n                                               <th>Favourite</th>\r\n                                               <th>Title</th>\r\n                                               <th>Year</th>\r\n                                               <th>ID</th>\r\n                                            </tr>\r\n                             </thead>\r\n                               <tbody>\r\n                                      {this.state.movie_array && this.state.movie_array.map((form_data) => \r\n                                                          (\r\n                                              <tr>\r\n                                                  <td><input type=\"checkbox\"\r\n                                                        checked={this.state.isChecked}\r\n                                                        onChange={this.toggleChange}\r\n                                                        value={this.state.movie_array.Title}        />\r\n                                                   </td>\r\n                                                  <td>{form_data.Title}</td>\r\n                                                  <td>{form_data.Year}</td>\r\n                                                  <td>{form_data.imdbID}</td>\r\n                                               </tr>\r\n                                                           \r\n                                ))}\r\n                                       \r\n                                  </tbody>     \r\n                                     \r\n                            </table>\r\n              </div>\r\n    );\r\n  }\r\n \r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Search extends React.Component {\r\n\r\nconstructor(){\r\n\r\nsuper();\r\n\r\nthis.state={ search_value:'', userList: [] }\r\n\r\n}\r\n\r\n  componentDidMount() {\r\n   \r\n      fetch('http://jsonplaceholder.typicode.com/todos')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      this.setState({ userList: data })\r\n      // alert(this.state.userList)\r\n      // console.log(this.state.userList)\r\n\r\n    })\r\n    .catch(console.log)\r\n  }\r\n\r\n  handleChange = event =>{\r\n\r\nthis.setState({ search_value:event.target.value })\r\n\r\n\r\n}\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n       <input type =\"text\" onChange={this.handleChange}/>\r\n        <ul>\r\n                {this.state.userList.filter(user => user.title.toLowerCase().startsWith(this.state.search_value) && this.state.search_value!='').map(filteredPerson => (\r\n        <li>\r\n          {filteredPerson.title}\r\n        </li>\r\n      ))}\r\n       </ul>\r\n       </div> \r\n        \r\n    );\r\n  }\r\n \r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport data from './maths.json';\r\nconst newdata = data;\r\nexport default class TextBook extends React.Component {\r\n\r\n    constructor() {\r\n        \r\n        super();\r\n\r\n       \r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n              \r\n                <ul>\r\n                    {newdata.map((todo, index) => (\r\n\r\n                       \r\n\r\n                        Object.values(todo).map((val, key) => (\r\n                          \r\n\r\n                            Object.values(val).map((val2, key1) => (\r\n                                Object.values(val2).map((val3, key3) => (\r\n                                   \r\n                                    \r\n                                        Object.values(val3).map((todos, index) => (\r\n                                            <li>{todos}</li>\r\n                                            ))\r\n                                    \r\n\r\n                                ))\r\n                            ))\r\n                            ))\r\n                               \r\n                            \r\n\r\n                                \r\n                        \r\n                        \r\n                    ))}\r\n                </ul>\r\n                \r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// JavaScript source code\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from './List';\r\nimport Search from './Search';\r\nimport TextBook from './TextBook';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  Link\r\n} from \"react-router-dom\";\r\nclass Form extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n       // console.log(socialMediaList)\r\n    }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n        <Router>\r\n    <div>\r\n\r\n\r\n      <div className=\"container-fluid\">\r\n          <div className=\"topnav\">\r\n          <a  href=\"#home\">Movie</a>\r\n           \r\n      </div>\r\n   \r\n    </div>\r\n\r\n     <div className=\"container-fluid text-center\">    \r\n       <div className=\"row content\">\r\n         <div className=\"col-sm-8 text-left\"> \r\n       \r\n           <Switch>\r\n                      <Route exact path=\"/Search\" component={Search}></Route>\r\n                     <Route exact path=\"/List\" component={List}></Route>\r\n                     <Route exact path=\"/TextBook\" component={TextBook}></Route>\r\n           </Switch>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n</div>\r\n  </Router>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Form from './Form';\nimport List from './List';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      flexiConfig: ''\n    };\n  }\n \n\n  render() {\n    return (\n      <div>\n          <Form/>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport './asset/external.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}