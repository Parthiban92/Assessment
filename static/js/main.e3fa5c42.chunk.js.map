{"version":3,"sources":["List.js","Search.js","TextBook.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["List","props","add_favourite","e","target","checked","setState","storage_list","state","concat","value","filter","val","console","log","FormData","event","form","Object","assign","name","localStorage","setItme","handleSubmit","preventDefault","query","keys","map","k","encodeURIComponent","join","fetch","then","data","b","json","movie_list","Search","movie_array","catch","error","header","s","y","apikey","className","id","onsubmit","type","onChange","this","onClick","form_data","isChecked","Title","Year","imdbID","React","Component","handleChange","search_value","userList","res","for","user","title","toLowerCase","startsWith","filteredPerson","newdata","TextBook","ch","l","Form","style","textAlignVertical","textAlign","exact","path","render","to","component","UserList","MovieList","App","flexiConfig","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e3fa5c42.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class List extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={  \r\n                       movie_array:[],\r\n                       storage_list:'',\r\n                       val: '',\r\n                      header: 'Movie List',\r\n                       form: {\r\n                           \r\n                           s: '',\r\n                           y: '',\r\n                           apikey: \"2c96c239\"\r\n                            }, \r\n                        \r\n                    }\r\n \r\n        console.log(props)\r\n    }\r\n\r\n\r\n\r\n    add_favourite = (e) => {\r\n       \r\n        if (e.target.checked) {\r\n            //append to array\r\n            this.setState({\r\n                storage_list: this.state.storage_list.concat(e.target.value)\r\n            })\r\n        } else {\r\n            //remove from array\r\n            this.setState({\r\n                storage_list: this.state.storage_list.filter(function (val) { return val !== e.target.value })\r\n            })\r\n        }\r\n        console.log(this.state.storage_list)\r\n    }\r\n  \r\n\r\n      FormData = (event) => {\r\n\r\n          this.setState({form: Object.assign({}, this.state.form,\r\n              { [event.target.name]: event.target.value })\r\n              \r\n          })\r\n          localStorage.setItme(\"favourite_list\", this.state.form);\r\n                           }\r\n\r\n      handleSubmit = (e) => {\r\n          e.preventDefault();\r\n          console.log(this.state.form)\r\n          let query = Object.keys(this.state.form).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(this.state.form[k])).join('&');\r\n                         let url = 'http://www.omdbapi.com/?' + query;\r\n                         fetch(url)\r\n                              .then(data => {\r\n                                   let b = data.json()\r\n                                      console.log(b)\r\n                                   return  b\r\n                              })\r\n                              .then((movie_list) => {\r\n                                  console.log(movie_list.Search)\r\n                                   this.setState({ movie_array: movie_list.Search })\r\n                                  console.log(movie_list)\r\n                                 }).catch(function (error) {\r\n                                  console.log('request failed', error)\r\n                              });\r\n\r\n                                   \r\n\r\n                             }\r\n  render() {\r\n\r\n    return (\r\n            <div>\r\n            <div className=\"row\">\r\n                <fieldset> <legend>Moive List</legend>\r\n                </fieldset>\r\n                          <div className=\"col-lg-12\">\r\n                              <div className=\"bs-component\">\r\n                                  <form className=\"well form-search\" id=\"search-by-title-form\" onsubmit=\"return false;\">\r\n                                  <fieldset> <legend></legend>\r\n                                  </fieldset>\r\n                                  <div>\r\n                                      <label className=\"control-label\" >Title:</label>\r\n                                      <input type=\"text\" id=\"s\" name=\"s\" className=\"input-small\" onChange={ this.FormData } />\r\n                                      &nbsp;&nbsp;\r\n                                      <label className=\"control-label\" >Year:</label>\r\n                                      <input type=\"text\" id=\"y\" name=\"y\" className=\"input-small\" onChange={ this.FormData }  />\r\n                                      &nbsp;&nbsp;\r\n                                      \r\n                                      &nbsp;&nbsp;\r\n                                      <button id=\"search-by-title-button\" type=\"button\" onClick={this.handleSubmit}  className=\"btn-sm btn-primary\">Search</button>\r\n                                      <button id=\"search-by-title-reset\" type=\"reset\" className=\"btn-sm\">Reset</button>\r\n                                  </div>\r\n                                  \r\n                                  </form>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                           <table className=\" table table-striped\">\r\n                              <thead>\r\n                                            <tr>\r\n                                               <th>Favourite</th>\r\n                                               <th>Title</th>\r\n                                               <th>Year</th>\r\n                                               <th>ID</th>\r\n                                            </tr>\r\n                             </thead>\r\n                               <tbody>\r\n                                      {this.state.movie_array && this.state.movie_array.map((form_data) => \r\n                                                          (\r\n                                              <tr>\r\n                                                  <td><input type=\"checkbox\"\r\n                                                      checked={this.state.isChecked}\r\n                                                      onChange={this.add_favourite}\r\n                                                      value={form_data.Title}        />\r\n                                                   </td>\r\n                                                  <td>{form_data.Title}</td>\r\n                                                  <td>{form_data.Year}</td>\r\n                                                  <td>{form_data.imdbID}</td>\r\n                                               </tr>\r\n                                                           \r\n                                ))}\r\n                                       \r\n                                  </tbody>     \r\n                                     \r\n                            </table>\r\n              </div>\r\n    );\r\n  }\r\n \r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Search extends React.Component {\r\n\r\nconstructor(){\r\n\r\nsuper();\r\n\r\n    this.state = { search_value: '', userList: [], header: 'User List', }\r\n\r\n}\r\n\r\n  componentDidMount() {\r\n   \r\n      fetch('http://jsonplaceholder.typicode.com/todos')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      this.setState({ userList: data })\r\n      // alert(this.state.userList)\r\n      // console.log(this.state.userList)\r\n\r\n    })\r\n    .catch(console.log)\r\n  }\r\n\r\n  handleChange = event =>{\r\n\r\nthis.setState({ search_value:event.target.value })\r\n\r\n\r\n}\r\n  render() {\r\n\r\n    return (\r\n        <div>\r\n            <fieldset> <legend>Type To Search List</legend>\r\n            </fieldset>\r\n            <label className=\"control-label\" for=\"s\">Title:</label>\r\n                   <input type =\"text\" onChange={this.handleChange}/>\r\n                <ul>\r\n                  {this.state.userList.filter(user => user.title.toLowerCase().startsWith(this.state.search_value) && this.state.search_value!='').map(filteredPerson => (\r\n                    <li>\r\n                      {filteredPerson.title}\r\n                    </li>\r\n                  ))}\r\n               </ul>\r\n       </div> \r\n        \r\n    );\r\n  }\r\n \r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport data from './maths.json';\r\nconst newdata = data;\r\nexport default class TextBook extends React.Component {\r\n\r\n    constructor() {\r\n        \r\n        super();\r\n\r\n       \r\n\r\n    }\r\n\r\n    render() {\r\n     //   console.log(newdata)\r\n        return <div>\r\n            <ul>\r\n                <li>\r\n                    {newdata.map(k => {\r\n                        //console.log(k)\r\n                        {\r\n                            Object.keys(k).map(ch => {\r\n                               // console.log(ch)\r\n                              \r\n                                    {Object.keys(ch).map(l => {\r\n                                       // return <li>{{l}}</li>\r\n                                    })}\r\n                               \r\n\r\n                            })}\r\n                    })}\r\n                </li>\r\n            </ul>\r\n            </div>\r\n\r\n     \r\n    }\r\n\r\n}\r\n\r\n// JavaScript source code\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MovieList from './List';\r\nimport UserList from './Search';\r\nimport TextBook from './TextBook';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  Link\r\n} from \"react-router-dom\";\r\nclass Form extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            header: 'Assesesment',\r\n        }\r\n       // console.log(socialMediaList)\r\n    }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n        <Router>\r\n    <div>\r\n\r\n\r\n      <div className=\"container-fluid\">\r\n                    <div className=\"topnav\">\r\n                        <h6 style={{ textAlignVertical: \"center\", textAlign: \"center\", }}>Assessment</h6>\r\n           \r\n      </div>\r\n   \r\n    </div>\r\n\r\n     <div className=\"container-fluid text-center\">    \r\n       <div className=\"row content\">\r\n         <div className=\"col-sm-8 text-left\"> \r\n           \r\n            <Switch>\r\n                                <Route exact path=\"/\" render={() => { return (<Redirect to=\"/UserList\" />)}}/>\r\n                       <Route exact path=\"/UserList\" component={UserList}></Route>\r\n                      <Route exact path=\"/MovieList\" component={MovieList}></Route>\r\n                     <Route exact path=\"/Search\" component={TextBook}></Route>\r\n           </Switch>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n</div>\r\n  </Router>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Form from './Form';\nimport List from './List';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      flexiConfig: ''\n    };\n  }\n \n\n  render() {\n    return (\n      <div>\n          <Form/>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport './asset/external.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}